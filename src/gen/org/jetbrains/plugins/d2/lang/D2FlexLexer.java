// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: D2Lexer.flex

package org.jetbrains.plugins.d2.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.util.text.StringUtilRt;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.d2.lang.D2ElementTypes.*;


public class D2FlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LABEL_STATE = 2;
  public static final int PROPERTY_VALUE_BEGIN_STATE = 4;
  public static final int PROPERTY_VALUE_STATE = 6;
  public static final int BLOCK_STRING_LANG_STATE = 8;
  public static final int BLOCK_STRING_BODY_STATE = 10;
  public static final int ARRAY_STATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\1\10\1\0\1\11\1\12\1\10"+
    "\1\0\1\13\2\0\1\14\1\15\1\0\3\16\1\17"+
    "\6\16\1\20\1\21\1\22\1\0\1\23\1\0\1\10"+
    "\6\24\24\25\1\26\1\27\1\30\1\0\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\25\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\25\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\7\0\1\3\32\0"+
    "\1\65\u01df\0\1\65\177\0\13\65\35\0\2\3\5\0"+
    "\1\65\57\0\1\65\240\0\1\65\377\0\u0100\66";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\3\3\1\5\1\1"+
    "\1\6\1\7\2\3\1\10\21\1\1\11\1\12\1\13"+
    "\1\14\1\2\1\15\2\14\1\16\1\17\1\20\1\3"+
    "\1\14\1\21\1\22\1\23\1\24\1\25\2\14\1\26"+
    "\2\27\1\3\1\30\1\31\1\14\1\32\5\0\1\33"+
    "\2\0\1\33\1\0\1\34\1\35\1\0\1\36\1\37"+
    "\1\0\36\1\1\12\2\0\1\33\1\14\1\0\5\14"+
    "\3\0\1\33\2\0\1\40\2\0\33\1\1\41\4\1"+
    "\1\33\1\14\1\42\2\14\3\0\6\1\2\36\20\1"+
    "\1\43\2\1\2\14\1\44\1\0\2\1\1\41\3\1"+
    "\3\0\7\1\1\45\1\1\1\0\3\1\1\14\1\46"+
    "\1\4\17\1\1\36\4\1\1\47\1\14\1\4\1\0"+
    "\2\1\1\0\7\1\2\0\3\1\1\14\1\4\15\1"+
    "\1\14\1\1\1\50\10\1\1\0\24\1\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u025d\0\u0302"+
    "\0\u025d\0\u025d\0\u0339\0\u0370\0\u0181\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u025d\0\u074e"+
    "\0\u025d\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u025d\0\u025d"+
    "\0\u025d\0\u0898\0\u08cf\0\u0906\0\u0785\0\u025d\0\u0785\0\u0785"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u025d\0\u0a19\0\u0a50\0\u0785"+
    "\0\u0a87\0\u0785\0\u0181\0\u0abe\0\u0af5\0\u0898\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0294\0\u025d\0\u0bd1\0\u0c08\0\u025d\0\u0c3f\0\u0181"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u0785\0\u082a\0\u0785\0\u138d\0\u0861\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u0a19\0\u14d7\0\u150e\0\u0b2c\0\u1545"+
    "\0\u157c\0\u025d\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u0181"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u082a\0\u1cca\0\u1432\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u0181\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u0785\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b"+
    "\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3"+
    "\0\u271a\0\u2751\0\u2788\0\u0181\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u0785\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u0785\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6"+
    "\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e"+
    "\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u025d\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u0181\0\u34da\0\u3511\0\u3548"+
    "\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700"+
    "\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8"+
    "\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70"+
    "\0\u3aa7\0\u3ade\0\u0181";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\5\11\1\12\1\13\2\14\1\15\1\10\1\16"+
    "\1\17\1\10\1\20\1\21\1\22\1\23\1\14\2\10"+
    "\1\14\1\24\1\14\1\25\1\26\1\27\1\30\1\31"+
    "\1\10\1\32\1\33\1\34\1\35\1\10\1\36\1\37"+
    "\1\40\1\41\2\10\1\42\1\43\1\44\1\45\1\46"+
    "\3\10\1\47\1\50\1\51\1\11\1\10\1\52\1\53"+
    "\1\54\2\14\1\54\1\55\3\52\1\56\6\52\1\14"+
    "\40\52\1\57\1\50\1\60\1\14\1\52\1\14\5\11"+
    "\12\14\1\61\6\14\1\62\35\14\1\11\1\14\1\52"+
    "\1\53\1\54\2\14\1\54\1\63\3\52\1\56\3\52"+
    "\2\64\1\65\1\66\4\52\1\67\1\52\1\70\6\52"+
    "\1\71\13\52\1\72\6\52\2\14\1\60\1\14\1\52"+
    "\1\73\5\74\55\73\1\75\1\73\1\74\1\73\63\76"+
    "\1\77\3\76\1\52\5\11\13\52\1\22\4\52\1\100"+
    "\1\101\1\102\31\52\3\14\1\11\1\52\1\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\31\10\1\0\1\10\2\0\1\10\1\0\5\11\21\0"+
    "\1\106\35\0\1\11\1\0\6\107\1\110\20\107\1\111"+
    "\37\107\2\13\4\0\60\13\70\0\12\112\1\113\14\112"+
    "\1\114\37\112\1\10\1\104\2\0\1\104\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\115\1\0\2\10"+
    "\3\0\1\116\2\10\1\0\1\117\1\0\31\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\4\10\1\120\24\10\1\0"+
    "\1\10\2\0\1\10\14\0\1\121\12\0\1\122\37\0"+
    "\2\10\1\11\3\0\60\10\1\0\1\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\15\10"+
    "\1\123\13\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\16\10"+
    "\1\124\12\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\13\10"+
    "\1\125\2\10\1\126\12\10\1\0\1\10\2\0\2\10"+
    "\1\103\2\0\1\103\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\104\1\0\2\10\4\0\2\10\1\0\1\105"+
    "\1\0\5\10\1\127\3\10\1\130\4\10\1\131\12\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\11\10\1\132\4\10"+
    "\1\133\12\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\20\10"+
    "\1\134\10\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\5\10"+
    "\1\135\10\10\1\136\12\10\1\0\1\10\2\0\2\10"+
    "\1\103\2\0\1\103\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\104\1\0\2\10\4\0\2\10\1\0\1\105"+
    "\1\0\3\10\1\137\16\10\1\140\6\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\1\10\1\141\3\10\1\142\3\10"+
    "\1\143\17\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\23\10"+
    "\1\144\5\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\5\10"+
    "\1\145\23\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\17\10"+
    "\1\146\11\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\10\10"+
    "\1\147\5\10\1\150\3\10\1\151\6\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\1\10\1\152\3\10\1\153\10\10"+
    "\1\154\12\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\15\10"+
    "\1\155\13\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\1\10"+
    "\1\156\3\10\1\157\23\10\1\0\1\10\2\0\2\10"+
    "\1\103\2\0\1\103\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\104\1\0\2\10\4\0\2\10\1\0\1\105"+
    "\1\0\11\10\1\160\17\10\1\0\1\10\2\0\1\10"+
    "\1\161\5\0\10\161\2\0\4\161\2\0\3\161\31\0"+
    "\1\161\1\50\1\161\1\0\1\161\1\52\1\162\4\0"+
    "\13\52\1\0\40\52\4\0\1\52\1\0\1\53\67\0"+
    "\1\54\2\0\1\54\61\0\1\55\1\163\4\107\1\164"+
    "\12\55\1\107\5\55\1\165\32\55\4\107\1\55\1\56"+
    "\1\166\4\112\4\56\1\164\6\56\1\112\5\56\1\167"+
    "\32\56\4\112\1\56\2\0\1\11\64\0\1\55\1\163"+
    "\4\107\1\164\1\170\11\55\1\107\5\55\1\165\32\55"+
    "\4\107\1\55\1\52\1\162\4\0\7\52\1\171\2\64"+
    "\1\52\1\0\40\52\4\0\2\52\1\162\4\0\13\52"+
    "\1\0\10\52\1\172\27\52\4\0\2\52\1\162\4\0"+
    "\13\52\1\0\27\52\1\173\10\52\4\0\1\52\1\73"+
    "\5\0\55\73\1\75\1\73\1\0\1\73\1\0\5\74"+
    "\57\0\1\74\1\0\63\174\1\77\3\174\63\0\1\77"+
    "\3\0\1\52\1\162\1\11\3\0\13\52\1\0\40\52"+
    "\4\0\1\52\1\10\1\104\2\0\1\104\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\3\0\2\10\4\0\2\10"+
    "\1\0\1\175\1\0\31\10\1\0\1\10\2\0\3\10"+
    "\1\103\3\0\60\10\1\0\6\107\1\113\20\107\1\111"+
    "\37\107\6\0\1\176\60\0\6\107\1\177\20\107\1\111"+
    "\37\107\2\112\4\0\60\112\15\0\1\115\6\0\1\116"+
    "\3\0\1\200\37\0\2\10\1\201\3\0\60\10\15\0"+
    "\1\121\6\0\1\202\3\0\1\203\41\0\1\204\64\0"+
    "\1\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\11\10\1\205\17\10\1\0\1\10\2\0"+
    "\2\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\13\10\1\20\4\10\1\206\10\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\1\10\1\207\27\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\15\10\1\210\13\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\21\10\1\211\7\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\20\10\1\212\10\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\23\10\1\213\5\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\13\10\1\214\15\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\15\10\1\215\13\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\11\10\1\216\17\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\11\10\1\217\17\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\20\10\1\220\10\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\16\10\1\221\12\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\1\10\1\222\27\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\2\10\1\223\26\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\6\10\1\224\22\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\15\10\1\225\13\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\13\10\1\226\15\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\1\10\1\227\27\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\1\10\1\230\27\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\1\10\1\231\27\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\23\10\1\232\5\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\20\10\1\233\6\10\1\234"+
    "\1\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\20\10\1\235"+
    "\10\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\26\10\1\236"+
    "\2\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\237"+
    "\1\240\11\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\4\10"+
    "\1\241\24\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\20\10"+
    "\1\242\10\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\20\10"+
    "\1\243\10\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\4\10"+
    "\1\244\24\10\1\0\1\10\2\0\1\10\1\161\5\0"+
    "\10\161\2\0\4\161\2\0\3\161\31\0\1\161\1\0"+
    "\1\161\1\0\1\161\1\55\1\163\4\107\1\245\12\55"+
    "\1\107\5\55\1\165\32\55\4\107\1\55\1\56\1\166"+
    "\4\0\13\56\1\112\40\56\4\112\1\52\1\55\1\163"+
    "\4\107\1\164\7\55\2\246\1\55\1\107\2\55\1\246"+
    "\2\55\1\165\2\55\6\246\22\55\4\107\1\55\1\52"+
    "\1\162\4\0\10\52\2\247\1\52\1\0\40\52\4\0"+
    "\2\52\1\162\4\0\13\52\1\0\22\52\1\250\15\52"+
    "\4\0\2\52\1\162\4\0\13\52\1\0\32\52\1\251"+
    "\5\52\4\0\1\52\2\10\1\104\3\0\60\10\1\0"+
    "\6\176\1\252\60\176\2\0\1\253\64\0\1\10\1\201"+
    "\2\0\1\201\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\115\1\0\2\10\3\0\1\116\2\10\1\0"+
    "\1\117\1\0\31\10\1\0\1\10\2\0\1\10\2\0"+
    "\1\254\65\0\1\204\2\0\1\204\7\0\1\121\12\0"+
    "\1\122\37\0\1\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\14\10\1\255\14\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\4\10\1\256\24\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\21\10\1\257\7\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\21\10\1\260\7\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\3\10\1\240\25\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\5\10\1\261\23\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\2\10\1\262\26\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\13\10\1\263\15\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\22\10\1\264\6\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\4\10\1\265\24\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\7\10\1\266\21\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\11\10\1\267\17\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\15\10\1\240\13\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\13\10\1\270\15\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\5\10\1\271\23\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\22\10\1\240\6\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\12\10\1\240\16\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\22\10\1\272\6\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\20\10\1\240\10\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\3\10\1\273\25\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\4\10\1\274\12\10\1\275"+
    "\11\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\20\10\1\276"+
    "\10\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\277"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\13\10\1\300"+
    "\15\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\7\10\1\301"+
    "\21\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\22\10\1\302"+
    "\6\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\13\10\1\303"+
    "\15\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\5\10\1\304"+
    "\23\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\21\10\1\305"+
    "\7\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\22\10\1\306"+
    "\6\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\22\10\1\307"+
    "\6\10\1\0\1\10\2\0\1\10\1\55\1\163\4\107"+
    "\1\164\7\55\2\310\1\55\1\107\2\55\1\310\2\55"+
    "\1\165\2\55\6\310\22\55\4\107\1\55\1\52\1\162"+
    "\4\0\13\52\1\0\30\52\1\311\7\52\4\0\2\52"+
    "\1\162\4\0\13\52\1\0\14\52\1\312\23\52\4\0"+
    "\1\52\6\176\1\313\60\176\1\0\1\253\2\0\1\253"+
    "\7\0\1\115\6\0\1\116\3\0\1\200\40\0\1\254"+
    "\2\0\1\254\7\0\1\121\6\0\1\202\3\0\1\203"+
    "\37\0\1\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\1\10\1\314\27\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\5\10\1\315\23\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\21\10\1\316\7\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\22\10\1\317\6\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\3\10\1\320\25\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\13\10\1\321\15\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\322\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\5\10\1\20\23\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\323\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\31\10\1\0\1\10\2\0\2\10"+
    "\1\103\2\0\1\103\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\324\1\0\2\10\4\0\2\10\1\0\1\105"+
    "\1\0\31\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\10\10"+
    "\1\224\20\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\30\10"+
    "\1\325\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\11\10\1\326"+
    "\17\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\13\10\1\240"+
    "\15\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\11\10\1\327"+
    "\17\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\11\10\1\330"+
    "\17\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\331"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\5\10\1\240"+
    "\23\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\3\10\1\332"+
    "\25\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\12\10\1\333"+
    "\16\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\5\10\1\334"+
    "\23\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\5\10\1\335"+
    "\23\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\336\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\31\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\22\10\1\337\6\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\20\10\1\340\10\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\11\10\1\341\17\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\10\10\1\240\20\10\1\0"+
    "\1\10\2\0\1\10\1\55\1\163\4\107\1\164\7\55"+
    "\2\342\1\55\1\107\2\55\1\342\2\55\1\165\2\55"+
    "\6\342\22\55\4\107\1\55\1\52\1\162\4\0\13\52"+
    "\1\0\14\52\1\343\23\52\4\0\1\52\6\176\1\344"+
    "\60\176\1\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\22\10\1\345\6\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\20\10\1\346\10\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\5\10\1\242\23\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\20\10\1\347\10\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\22\10\1\350\6\10\1\0\1\10"+
    "\2\0\2\10\1\103\2\0\1\103\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\104\1\0\2\10\4\0\2\10"+
    "\1\0\1\105\1\0\5\10\1\351\23\10\1\0\1\10"+
    "\2\0\2\10\1\104\2\0\1\104\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\3\0\2\10\4\0\2\10\1\0"+
    "\1\175\1\0\17\10\1\352\11\10\1\0\1\10\2\0"+
    "\2\10\1\104\2\0\1\104\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\3\0\2\10\4\0\2\10\1\0\1\175"+
    "\1\0\3\10\1\353\15\10\1\354\7\10\1\0\1\10"+
    "\2\0\2\10\1\104\2\0\1\104\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\3\0\2\10\4\0\2\10\1\0"+
    "\1\175\1\0\3\10\1\355\3\10\1\356\10\10\1\357"+
    "\10\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\360"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\3\10\1\120"+
    "\25\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\17\10\1\361"+
    "\11\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\22\10\1\362"+
    "\6\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\25\10\1\120"+
    "\3\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\5\10\1\363"+
    "\23\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\5\10\1\364"+
    "\23\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\22\10\1\363"+
    "\6\10\1\0\1\10\2\0\2\10\1\104\2\0\1\104"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\3\0\2\10"+
    "\4\0\2\10\1\0\1\175\1\0\22\10\1\365\6\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\11\10\1\366\17\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\13\10\1\367\15\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\3\10\1\370\25\10"+
    "\1\0\1\10\2\0\1\10\1\55\1\163\4\107\1\371"+
    "\7\55\2\372\1\55\1\107\2\55\1\372\2\55\1\165"+
    "\2\55\6\372\22\55\4\107\1\55\6\0\1\373\60\0"+
    "\1\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\5\10\1\20\23\10\1\0\1\10\2\0"+
    "\2\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\374\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\31\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\1\10\1\375\27\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\11\10\1\376\17\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\377\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\31\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\1\10\1\u0100"+
    "\27\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\u0101"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\11\10\1\u0102"+
    "\17\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\u0103"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\1\10\1\366"+
    "\27\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\u0104"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\15\10\1\u0105"+
    "\13\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\13\10\1\u0106"+
    "\15\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\27\10\1\120"+
    "\1\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\u0107\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\31\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\u0108\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\31\10\1\0\1\10\2\0"+
    "\2\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\20\10\1\u0109\10\10\1\0\1\10\2\0"+
    "\2\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\17\10\1\240\11\10\1\0\1\10\2\0"+
    "\2\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\11\10\1\u010a\17\10\1\0\1\10\2\0"+
    "\2\10\1\103\2\0\1\103\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\104\1\0\2\10\4\0\2\10\1\0"+
    "\1\105\1\0\1\10\1\u010b\27\10\1\0\1\10\2\0"+
    "\1\10\1\55\1\163\4\107\1\164\7\55\2\u010c\1\55"+
    "\1\107\2\55\1\u010c\2\55\1\165\2\55\6\u010c\22\55"+
    "\4\107\1\55\6\0\1\u010d\60\0\1\10\1\104\2\0"+
    "\1\104\1\0\1\10\1\0\1\10\1\0\1\10\3\0"+
    "\2\10\4\0\2\10\1\0\1\175\1\0\20\10\1\u010e"+
    "\10\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\11\10\1\u010f"+
    "\17\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\u0110"+
    "\12\10\1\0\1\10\2\0\2\10\1\104\2\0\1\104"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\3\0\2\10"+
    "\4\0\2\10\1\0\1\175\1\0\2\10\1\u0111\26\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\22\10\1\u0112\6\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\13\10\1\u0113\15\10"+
    "\1\0\1\10\2\0\2\10\1\103\2\0\1\103\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\1\104\1\0\2\10"+
    "\4\0\2\10\1\0\1\105\1\0\30\10\1\u0106\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\13\10\1\u0114\15\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\25\10\1\u0115\3\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\22\10\1\370\6\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\5\10\1\120\23\10\1\0"+
    "\1\10\2\0\2\10\1\104\2\0\1\104\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\3\0\2\10\4\0\2\10"+
    "\1\0\1\175\1\0\1\10\1\u0116\27\10\1\0\1\10"+
    "\2\0\2\10\1\104\2\0\1\104\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\3\0\2\10\4\0\2\10\1\0"+
    "\1\175\1\0\4\10\1\u0117\20\10\1\u0118\3\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\1\10\1\u0119\27\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\15\10\1\u0106\13\10\1\0"+
    "\1\10\2\0\2\10\1\103\2\0\1\103\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\104\1\0\2\10\4\0"+
    "\2\10\1\0\1\105\1\0\13\10\1\u011a\15\10\1\0"+
    "\1\10\2\0\1\10\1\55\1\163\4\107\1\164\7\55"+
    "\2\u011b\1\55\1\107\2\55\1\u011b\2\55\1\165\2\55"+
    "\6\u011b\22\55\4\107\1\55\1\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\1\10\1\u011c"+
    "\27\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\15\10\1\224"+
    "\13\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\15\10\1\u011d"+
    "\13\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\u011e"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\22\10\1\u011f"+
    "\6\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\16\10\1\u0120"+
    "\12\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\23\10\1\u0121"+
    "\5\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\21\10\1\240"+
    "\7\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\20\10\1\u0122"+
    "\10\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\1\10\1\u0123"+
    "\27\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\11\10\1\u0124"+
    "\17\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\104\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\15\10\1\u0125"+
    "\13\10\1\0\1\10\2\0\2\10\1\103\2\0\1\103"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\u0126\1\0"+
    "\2\10\4\0\2\10\1\0\1\105\1\0\31\10\1\0"+
    "\1\10\2\0\1\10\1\55\1\163\4\107\1\371\12\55"+
    "\1\107\5\55\1\165\32\55\4\107\1\55\1\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\4\10\1\u0127\24\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\20\10\1\u0128\10\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\5\10\1\u0129\23\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\20\10\1\120\10\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\14\10\1\u012a\14\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\20\10\1\u012b\10\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\21\10\1\u012c\7\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\4\10\1\u012d\24\10\1\0\1\10\2\0\2\10\1\103"+
    "\2\0\1\103\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\104\1\0\2\10\4\0\2\10\1\0\1\105\1\0"+
    "\21\10\1\u012e\7\10\1\0\1\10\2\0\2\10\1\104"+
    "\2\0\1\104\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\3\0\2\10\4\0\2\10\1\0\1\175\1\0\7\10"+
    "\1\356\21\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\11\10"+
    "\1\u012f\17\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\4\10"+
    "\1\u0130\24\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\20\10"+
    "\1\u0131\10\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\15\10"+
    "\1\u0115\13\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\16\10"+
    "\1\u0132\12\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\10\10"+
    "\1\120\20\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\22\10"+
    "\1\u012c\6\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\6\10"+
    "\1\u0133\22\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\23\10"+
    "\1\u0134\5\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\5\10"+
    "\1\u0120\23\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\15\10"+
    "\1\120\13\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\25\10"+
    "\1\u0135\3\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\16\10"+
    "\1\u0136\12\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\21\10"+
    "\1\120\7\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\10\10"+
    "\1\u0137\20\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\20\10"+
    "\1\u0138\10\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\5\10"+
    "\1\u0139\23\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\14\10"+
    "\1\120\14\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\1\10"+
    "\1\u013a\27\10\1\0\1\10\2\0\2\10\1\103\2\0"+
    "\1\103\1\0\1\10\1\0\1\10\1\0\2\10\1\104"+
    "\1\0\2\10\4\0\2\10\1\0\1\105\1\0\4\10"+
    "\1\u013b\24\10\1\0\1\10\2\0\1\10";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15125];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\4\1\1\11\2\1\1\11\1\1\2\11\24\1"+
    "\1\11\1\1\1\11\5\1\3\11\4\1\1\11\6\1"+
    "\1\11\5\1\5\0\1\1\2\0\1\11\1\0\1\1"+
    "\1\11\1\0\2\1\1\0\37\1\2\0\2\1\1\0"+
    "\5\1\3\0\1\1\2\0\1\11\2\0\45\1\3\0"+
    "\36\1\1\0\6\1\3\0\11\1\1\0\35\1\1\0"+
    "\2\1\1\0\7\1\2\0\4\1\1\11\30\1\1\0"+
    "\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public D2FlexLexer() {
    this((java.io.Reader)null);
  }

  private StringBuilder blockStringToken;

  private IElementType startBlockString() {
    yybegin(BLOCK_STRING_LANG_STATE);
    blockStringToken = new StringBuilder(yytext()).reverse();
    return BLOCK_STRING_OPEN;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public D2FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_STRING_LANG_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 316: break;
            case BLOCK_STRING_BODY_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 317: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ID;
            }
          // fall through
          case 42: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 43: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 44: break;
          case 4:
            { return COMMENT;
            }
          // fall through
          case 45: break;
          case 5:
            { return DOT;
            }
          // fall through
          case 46: break;
          case 6:
            { yybegin(LABEL_STATE); return COLON;
            }
          // fall through
          case 47: break;
          case 7:
            { return SEMICOLON;
            }
          // fall through
          case 48: break;
          case 8:
            { return PARENT_SHAPE_REF;
            }
          // fall through
          case 49: break;
          case 9:
            { return LBRACE;
            }
          // fall through
          case 50: break;
          case 10:
            { return startBlockString();
            }
          // fall through
          case 51: break;
          case 11:
            { return RBRACE;
            }
          // fall through
          case 52: break;
          case 12:
            { return UNQUOTED_STRING;
            }
          // fall through
          case 53: break;
          case 13:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 54: break;
          case 14:
            { yybegin(YYINITIAL); return LBRACE;
            }
          // fall through
          case 55: break;
          case 15:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 56: break;
          case 16:
            { yybegin(PROPERTY_VALUE_STATE); return COLON;
            }
          // fall through
          case 57: break;
          case 17:
            { return INT;
            }
          // fall through
          case 58: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 59: break;
          case 19:
            { yybegin(YYINITIAL); return SEMICOLON;
            }
          // fall through
          case 60: break;
          case 20:
            { yybegin(ARRAY_STATE); return LBRACKET;
            }
          // fall through
          case 61: break;
          case 21:
            { return RBRACKET;
            }
          // fall through
          case 62: break;
          case 22:
            { yybegin(BLOCK_STRING_BODY_STATE); return BLOCK_STRING_LANG;
            }
          // fall through
          case 63: break;
          case 23:
            { yypushback(yylength());
        yybegin(BLOCK_STRING_BODY_STATE);
            }
          // fall through
          case 64: break;
          case 24:
            { if (blockStringToken == null) {
				yybegin(YYINITIAL);
				blockStringToken = null;
				return BLOCK_STRING_CLOSE;
		}
		else if (StringUtilRt.endsWith(yytext(), blockStringToken)) {
				// push back to register on next step as a BLOCK_STRING_CLOSE token,
				// (we neeed it to easily implement embededed language, brace matcher and so on)
				yypushback(blockStringToken.length());
				blockStringToken = null;
				return BLOCK_STRING_BODY;
		}
            }
          // fall through
          case 65: break;
          case 25:
            { return LBRACKET;
            }
          // fall through
          case 66: break;
          case 26:
            { yybegin(YYINITIAL); return RBRACKET;
            }
          // fall through
          case 67: break;
          case 27:
            { return STRING;
            }
          // fall through
          case 68: break;
          case 28:
            { return DOUBLE_HYPHEN_ARROW;
            }
          // fall through
          case 69: break;
          case 29:
            { return ARROW;
            }
          // fall through
          case 70: break;
          case 30:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return STYLE_KEYWORDS;
            }
          // fall through
          case 71: break;
          case 31:
            { return REVERSE_ARROW;
            }
          // fall through
          case 72: break;
          case 32:
            { return DOUBLE_ARROW;
            }
          // fall through
          case 73: break;
          case 33:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return SIMPLE_RESERVED_KEYWORDS;
            }
          // fall through
          case 74: break;
          case 34:
            { return FLOAT;
            }
          // fall through
          case 75: break;
          case 35:
            { return COMPOSITE_RESERVED_KEYWORDS;
            }
          // fall through
          case 76: break;
          case 36:
            { return TRUE;
            }
          // fall through
          case 77: break;
          case 37:
            { return STYLE_KEYWORD;
            }
          // fall through
          case 78: break;
          case 38:
            { return FALSE;
            }
          // fall through
          case 79: break;
          case 39:
            { return COLOR;
            }
          // fall through
          case 80: break;
          case 40:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return CONTAINER_LESS_KEYWORDS;
            }
          // fall through
          case 81: break;
          case 41:
            { return RESERVED_KEYWORD_HOLDERS;
            }
          // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
