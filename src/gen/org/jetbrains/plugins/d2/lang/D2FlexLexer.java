// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: D2Lexer.flex

package org.jetbrains.plugins.d2.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.util.text.StringUtilRt;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.d2.lang.D2ElementTypes.*;


public class D2FlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LABEL_STATE = 2;
  public static final int PROPERTY_VALUE_BEGIN_STATE = 4;
  public static final int PROPERTY_VALUE_STATE = 6;
  public static final int BLOCK_STRING_LANG_STATE = 8;
  public static final int BLOCK_STRING_BODY_STATE = 10;
  public static final int ARRAY_STATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\5\0\1\7\1\10\1\0"+
    "\3\11\1\12\6\11\1\13\1\14\1\15\1\0\1\16"+
    "\2\0\6\17\24\20\1\21\1\22\1\23\1\0\1\24"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\20\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\20\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\7\0\1\3"+
    "\32\0\1\60\u01df\0\1\60\177\0\13\60\35\0\2\3"+
    "\5\0\1\60\57\0\1\60\240\0\1\60\377\0\u0100\61";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\2\4\1\10\21\1\1\11\1\12"+
    "\1\13\1\2\1\14\2\13\1\15\1\16\1\17\1\20"+
    "\1\13\1\21\1\22\1\23\1\24\1\25\2\13\1\26"+
    "\1\4\1\27\1\30\1\31\1\0\1\1\2\0\2\1"+
    "\1\3\2\0\1\1\1\32\1\33\1\34\1\35\36\1"+
    "\2\0\1\36\1\13\1\0\1\13\1\16\4\13\1\0"+
    "\1\36\1\0\1\1\1\0\1\37\33\1\1\40\4\1"+
    "\1\36\1\13\1\41\2\13\1\36\2\0\7\1\2\34"+
    "\20\1\1\42\2\1\2\13\1\43\1\0\3\1\1\40"+
    "\3\1\3\0\7\1\1\44\1\1\1\0\3\1\1\13"+
    "\1\45\1\0\1\3\17\1\1\34\4\1\1\46\1\13"+
    "\2\3\1\0\2\1\1\0\7\1\2\0\3\1\1\13"+
    "\2\3\15\1\1\13\1\3\1\1\1\47\10\1\1\0"+
    "\24\1\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u028a"+
    "\0\u028a\0\u02ee\0\u028a\0\u015e\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u028a\0\u028a\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u028a\0\u076c\0\u028a\0\u028a"+
    "\0\u079e\0\u07d0\0\u0672\0\u028a\0\u0672\0\u0672\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u0672\0\u0672\0\u015e\0\u08fc\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u0226\0\u09f6\0\u0a28\0\u0258"+
    "\0\u028a\0\u015e\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u0672\0\u0708\0\u0672\0\u1068\0\u073a\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u0898\0\u028a\0\u11c6\0\u11f8"+
    "\0\u122a\0\u028a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u015e\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u0708\0\u186a\0\u1130\0\u189c\0\u18ce\0\u092e"+
    "\0\u11f8\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\u015e\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u0672\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008"+
    "\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198"+
    "\0\u21ca\0\u21fc\0\u222e\0\u015e\0\u2260\0\u2292\0\u22c4\0\u22f6"+
    "\0\u2328\0\u235a\0\u0672\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454"+
    "\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774"+
    "\0\u27a6\0\u0672\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2"+
    "\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62"+
    "\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u015e"+
    "\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50"+
    "\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u028a\0\u2eae"+
    "\0\u015e\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c"+
    "\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c"+
    "\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\1\14\1\15\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\23\5\10\1\24\1\25"+
    "\1\26\1\27\1\30\1\10\1\31\1\32\1\33\1\34"+
    "\1\10\1\35\1\36\1\37\1\40\2\10\1\41\1\42"+
    "\1\43\1\44\1\45\3\10\1\46\1\23\1\47\1\11"+
    "\1\10\1\50\1\51\1\52\1\23\1\53\1\50\1\54"+
    "\5\50\1\23\40\50\1\55\1\56\1\57\1\23\1\50"+
    "\1\23\3\11\7\23\1\60\44\23\1\11\1\23\1\50"+
    "\1\51\1\52\1\23\1\61\1\50\1\54\2\50\2\62"+
    "\1\63\1\64\4\50\1\65\1\50\1\66\6\50\1\67"+
    "\13\50\1\70\6\50\2\23\1\57\1\23\1\50\1\71"+
    "\3\11\52\71\1\23\1\71\1\11\1\71\56\72\1\73"+
    "\3\72\1\50\3\11\10\50\1\21\4\50\1\74\1\50"+
    "\1\75\31\50\3\23\1\11\1\50\1\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\36\10\4\0\1\10"+
    "\1\0\3\11\54\0\1\11\1\0\1\77\1\100\2\101"+
    "\1\102\2\77\1\100\1\101\2\77\4\101\3\77\1\103"+
    "\32\77\4\101\1\77\2\13\2\0\4\13\1\104\2\13"+
    "\4\104\36\13\4\104\1\10\1\14\1\105\2\106\2\14"+
    "\1\10\1\105\1\106\2\14\4\106\3\14\1\107\32\14"+
    "\4\106\1\14\7\0\1\110\6\0\1\111\125\0\1\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\11\10"+
    "\1\112\24\10\4\0\1\10\7\0\1\113\52\0\1\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\22\10"+
    "\1\114\13\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\23\10\1\115\12\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\20\10"+
    "\1\116\2\10\1\117\12\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\12\10\1\120\3\10"+
    "\1\121\4\10\1\122\12\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\16\10\1\123\4\10"+
    "\1\124\12\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\25\10\1\125\10\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\12\10"+
    "\1\126\10\10\1\127\12\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\10\10\1\130\16\10"+
    "\1\131\6\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\6\10\1\132\3\10\1\133\3\10"+
    "\1\134\17\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\30\10\1\135\5\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\12\10"+
    "\1\136\23\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\24\10\1\137\11\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\15\10"+
    "\1\140\5\10\1\141\3\10\1\142\6\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\6\10"+
    "\1\143\3\10\1\144\10\10\1\145\12\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\22\10"+
    "\1\146\13\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\6\10\1\147\3\10\1\150\23\10"+
    "\4\0\2\10\1\76\2\0\3\10\1\76\1\0\2\10"+
    "\4\0\16\10\1\151\17\10\4\0\1\10\1\50\1\152"+
    "\2\0\10\50\1\0\40\50\4\0\1\50\1\0\1\51"+
    "\62\0\1\52\57\0\1\53\1\153\2\101\1\154\7\53"+
    "\1\101\5\53\1\155\32\53\4\101\1\53\1\54\1\156"+
    "\2\106\2\54\1\154\5\54\1\106\5\54\1\157\32\54"+
    "\4\106\1\54\1\160\3\0\5\160\2\0\4\160\2\0"+
    "\3\160\31\0\1\160\1\56\1\160\1\0\1\160\1\53"+
    "\1\153\2\101\1\154\1\161\6\53\1\101\5\53\1\155"+
    "\32\53\4\101\1\53\1\50\1\152\2\0\4\50\1\162"+
    "\2\62\1\50\1\0\40\50\4\0\2\50\1\152\2\0"+
    "\10\50\1\0\10\50\1\163\27\50\4\0\2\50\1\152"+
    "\2\0\10\50\1\0\27\50\1\164\10\50\4\0\1\50"+
    "\1\71\3\0\52\71\1\0\1\71\1\0\1\71\56\165"+
    "\1\73\3\165\56\0\1\73\3\0\1\77\1\100\2\101"+
    "\1\10\2\77\1\100\1\101\2\77\4\101\3\77\1\103"+
    "\32\77\4\101\1\77\4\101\1\166\15\101\1\167\37\101"+
    "\1\10\1\76\2\0\1\170\2\10\1\76\1\0\2\10"+
    "\4\0\36\10\4\0\1\10\1\77\1\100\2\101\3\77"+
    "\1\100\1\101\2\77\4\101\3\77\1\103\32\77\4\101"+
    "\1\77\2\104\2\0\55\104\1\0\6\106\1\166\13\106"+
    "\1\171\37\106\1\14\1\105\2\0\3\14\1\105\1\106"+
    "\2\14\4\106\36\14\4\106\1\10\7\0\1\113\6\0"+
    "\1\172\43\0\1\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\16\10\1\173\17\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\20\10\1\17"+
    "\4\10\1\174\10\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\6\10\1\175\27\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\22\10\1\176\13\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\26\10\1\177\7\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\25\10\1\200\10\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\30\10\1\201\5\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\20\10\1\202\15\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\22\10\1\203\13\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\16\10\1\204\17\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\16\10\1\205\17\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\25\10\1\206\10\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\23\10\1\207\12\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\6\10\1\210\27\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\7\10\1\211\26\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\13\10\1\212\22\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\22\10\1\213\13\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\20\10\1\214\15\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\6\10\1\215\27\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\6\10\1\216\27\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\6\10\1\217\27\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\30\10\1\220\5\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\25\10\1\221\6\10\1\222"+
    "\1\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\223\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\33\10\1\224"+
    "\2\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\23\10\1\225\1\226\11\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\11\10"+
    "\1\227\24\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\25\10\1\230\10\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\25\10"+
    "\1\231\10\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\11\10\1\232\24\10\4\0\1\10"+
    "\1\53\1\153\2\101\1\233\7\53\1\101\5\53\1\155"+
    "\32\53\4\101\1\53\1\54\1\156\2\0\10\54\1\106"+
    "\40\54\4\106\1\50\1\160\3\0\5\160\2\0\4\160"+
    "\2\0\3\160\31\0\1\160\1\0\1\160\1\0\1\160"+
    "\1\53\1\153\2\101\1\154\4\53\2\234\1\53\1\101"+
    "\2\53\1\234\2\53\1\155\2\53\6\234\22\53\4\101"+
    "\1\53\1\50\1\152\2\0\5\50\2\235\1\50\1\0"+
    "\40\50\4\0\2\50\1\152\2\0\10\50\1\0\22\50"+
    "\1\236\15\50\4\0\2\50\1\152\2\0\10\50\1\0"+
    "\32\50\1\237\5\50\4\0\1\50\4\101\1\240\15\101"+
    "\1\167\37\101\1\170\1\241\2\242\1\243\2\170\1\241"+
    "\1\242\2\170\4\242\36\170\4\242\1\170\2\106\2\0"+
    "\55\106\1\0\1\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\21\10\1\244\14\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\11\10\1\245"+
    "\24\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\26\10\1\246\7\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\26\10\1\247"+
    "\7\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\10\10\1\226\25\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\12\10\1\250"+
    "\23\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\7\10\1\251\26\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\20\10\1\252"+
    "\15\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\27\10\1\253\6\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\11\10\1\254"+
    "\24\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\14\10\1\255\21\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\16\10\1\256"+
    "\17\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\22\10\1\226\13\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\20\10\1\257"+
    "\15\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\12\10\1\260\23\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\27\10\1\226"+
    "\6\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\17\10\1\226\16\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\27\10\1\261"+
    "\6\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\226\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\10\10\1\262"+
    "\25\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\11\10\1\263\12\10\1\264\11\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\25\10\1\265\10\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\23\10\1\266\12\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\20\10\1\267\15\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\14\10\1\270\21\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\27\10\1\271\6\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\20\10\1\272\15\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\12\10\1\273\23\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\26\10\1\274\7\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\27\10\1\275\6\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\27\10\1\276\6\10\4\0"+
    "\1\10\1\53\1\153\2\101\1\154\4\53\2\277\1\53"+
    "\1\101\2\53\1\277\2\53\1\155\2\53\6\277\22\53"+
    "\4\101\1\53\1\50\1\152\2\0\10\50\1\0\30\50"+
    "\1\300\7\50\4\0\2\50\1\152\2\0\10\50\1\0"+
    "\14\50\1\301\23\50\4\0\1\50\4\242\1\302\55\242"+
    "\1\170\1\241\2\242\1\303\2\170\1\241\1\242\2\170"+
    "\4\242\36\170\4\242\1\170\1\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\6\10\1\304\27\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\12\10\1\305\23\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\26\10\1\306\7\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\27\10\1\307\6\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\10\10\1\310\25\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\20\10\1\311\15\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\312\1\0\2\10\4\0\12\10\1\17\23\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\313\1\0\2\10\4\0"+
    "\36\10\4\0\2\10\1\76\2\0\3\10\1\314\1\0"+
    "\2\10\4\0\36\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\15\10\1\212\20\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\35\10\1\315\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\16\10\1\316\17\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\20\10"+
    "\1\226\15\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\16\10\1\317\17\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\16\10"+
    "\1\320\17\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\23\10\1\321\12\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\12\10"+
    "\1\226\23\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\10\10\1\322\25\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\17\10"+
    "\1\323\16\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\12\10\1\324\23\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\12\10"+
    "\1\325\23\10\4\0\2\10\1\76\2\0\3\10\1\326"+
    "\1\0\2\10\4\0\36\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\27\10\1\327\6\10"+
    "\4\0\2\10\1\76\2\0\3\10\1\76\1\0\2\10"+
    "\4\0\25\10\1\330\10\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\16\10\1\331\17\10"+
    "\4\0\2\10\1\76\2\0\3\10\1\76\1\0\2\10"+
    "\4\0\15\10\1\226\20\10\4\0\1\10\1\53\1\153"+
    "\2\101\1\154\4\53\2\332\1\53\1\101\2\53\1\332"+
    "\2\53\1\155\2\53\6\332\22\53\4\101\1\53\1\50"+
    "\1\152\2\0\10\50\1\0\14\50\1\333\23\50\4\0"+
    "\1\50\4\242\1\334\55\242\1\170\1\241\2\242\1\335"+
    "\2\170\1\241\1\242\2\170\4\242\36\170\4\242\1\170"+
    "\1\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\27\10\1\336\6\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\25\10\1\337\10\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\12\10\1\230\23\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\25\10\1\340\10\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\27\10\1\341\6\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\12\10\1\342\23\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\24\10\1\343\11\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\10\10\1\344\15\10\1\345"+
    "\7\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\10\10\1\346\3\10\1\347\10\10\1\350"+
    "\10\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\23\10\1\351\12\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\10\10\1\112"+
    "\25\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\24\10\1\352\11\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\27\10\1\353"+
    "\6\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\32\10\1\112\3\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\12\10\1\354"+
    "\23\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\12\10\1\355\23\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\27\10\1\354"+
    "\6\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\27\10\1\356\6\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\16\10\1\357"+
    "\17\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\20\10\1\360\15\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\10\10\1\361"+
    "\25\10\4\0\1\10\1\53\1\153\2\101\1\362\4\53"+
    "\2\363\1\53\1\101\2\53\1\363\2\53\1\155\2\53"+
    "\6\363\22\53\4\101\1\53\4\242\1\364\55\242\1\10"+
    "\1\76\2\0\1\365\2\10\1\76\1\0\2\10\4\0"+
    "\36\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\12\10\1\17\23\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\366\1\0\2\10\4\0\36\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\6\10\1\367\27\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\16\10\1\370\17\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\371\1\0\2\10\4\0"+
    "\36\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\6\10\1\372\27\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\23\10\1\373"+
    "\12\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\16\10\1\374\17\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\23\10\1\375"+
    "\12\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\6\10\1\357\27\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\23\10\1\376"+
    "\12\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\22\10\1\377\13\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\20\10\1\u0100"+
    "\15\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\34\10\1\112\1\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\u0101\1\0\2\10\4\0\36\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\u0102\1\0\2\10\4\0"+
    "\36\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\u0103\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\24\10\1\226"+
    "\11\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\16\10\1\u0104\17\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\6\10\1\u0105"+
    "\27\10\4\0\1\10\1\53\1\153\2\101\1\154\4\53"+
    "\2\u0106\1\53\1\101\2\53\1\u0106\2\53\1\155\2\53"+
    "\6\u0106\22\53\4\101\1\53\4\0\1\u0107\55\0\1\10"+
    "\1\76\2\0\1\u0108\2\10\1\76\1\0\2\10\4\0"+
    "\36\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\u0109\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\16\10\1\u010a"+
    "\17\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\23\10\1\u010b\12\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\7\10\1\u010c"+
    "\26\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\27\10\1\u010d\6\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\20\10\1\u010e"+
    "\15\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\35\10\1\u0100\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\20\10\1\u010f\15\10"+
    "\4\0\2\10\1\76\2\0\3\10\1\76\1\0\2\10"+
    "\4\0\32\10\1\u0110\3\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\27\10\1\361\6\10"+
    "\4\0\2\10\1\76\2\0\3\10\1\76\1\0\2\10"+
    "\4\0\12\10\1\112\23\10\4\0\2\10\1\76\2\0"+
    "\3\10\1\76\1\0\2\10\4\0\6\10\1\u0111\27\10"+
    "\4\0\2\10\1\76\2\0\3\10\1\76\1\0\2\10"+
    "\4\0\11\10\1\u0112\20\10\1\u0113\3\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\6\10"+
    "\1\u0114\27\10\4\0\2\10\1\76\2\0\3\10\1\76"+
    "\1\0\2\10\4\0\22\10\1\u0100\13\10\4\0\2\10"+
    "\1\76\2\0\3\10\1\76\1\0\2\10\4\0\20\10"+
    "\1\u0115\15\10\4\0\1\10\1\53\1\153\2\101\1\154"+
    "\4\53\2\u0116\1\53\1\101\2\53\1\u0116\2\53\1\155"+
    "\2\53\6\u0116\22\53\4\101\1\53\4\0\1\u0117\55\0"+
    "\1\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\6\10\1\u0118\27\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\22\10\1\212\13\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\22\10\1\u0119\13\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\23\10\1\u011a\12\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\27\10\1\u011b\6\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\23\10\1\u011c\12\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\30\10\1\u011d\5\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\26\10\1\226\7\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\25\10\1\u011e\10\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\6\10\1\u011f\27\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\76\1\0\2\10\4\0"+
    "\16\10\1\u0120\17\10\4\0\2\10\1\76\2\0\3\10"+
    "\1\76\1\0\2\10\4\0\22\10\1\u0121\13\10\4\0"+
    "\2\10\1\76\2\0\3\10\1\u0122\1\0\2\10\4\0"+
    "\36\10\4\0\1\10\1\53\1\153\2\101\1\362\7\53"+
    "\1\101\5\53\1\155\32\53\4\101\1\53\1\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\11\10\1\u0123"+
    "\24\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\u0124\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\12\10\1\u0125"+
    "\23\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\112\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\21\10\1\u0126"+
    "\14\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\u0127\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\26\10\1\u0128"+
    "\7\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\11\10\1\u0129\24\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\26\10\1\u012a"+
    "\7\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\14\10\1\347\21\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\16\10\1\u012b"+
    "\17\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\11\10\1\u012c\24\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\25\10\1\u012d"+
    "\10\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\22\10\1\u0110\13\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\23\10\1\u012e"+
    "\12\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\15\10\1\112\20\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\27\10\1\u0128"+
    "\6\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\13\10\1\u012f\22\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\30\10\1\u0130"+
    "\5\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\12\10\1\u011c\23\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\22\10\1\112"+
    "\13\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\32\10\1\u0131\3\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\23\10\1\u0132"+
    "\12\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\26\10\1\112\7\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\15\10\1\u0133"+
    "\20\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\25\10\1\u0134\10\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\12\10\1\u0135"+
    "\23\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\21\10\1\112\14\10\4\0\2\10\1\76"+
    "\2\0\3\10\1\76\1\0\2\10\4\0\6\10\1\u0136"+
    "\27\10\4\0\2\10\1\76\2\0\3\10\1\76\1\0"+
    "\2\10\4\0\11\10\1\u0137\24\10\4\0\1\10";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13450];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\6\1\1\11\1\1\2\11\1\1\1\11\22\1"+
    "\2\11\5\1\1\11\1\1\2\11\3\1\1\11\11\1"+
    "\1\0\1\1\2\0\3\1\2\0\2\1\1\11\40\1"+
    "\2\0\2\1\1\0\6\1\1\0\1\11\1\0\1\1"+
    "\1\0\1\11\46\1\2\0\37\1\1\0\7\1\3\0"+
    "\11\1\1\0\5\1\1\0\31\1\1\0\2\1\1\0"+
    "\7\1\2\0\24\1\1\11\12\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public D2FlexLexer() {
    this((java.io.Reader)null);
  }

  private StringBuilder blockStringToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public D2FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_STRING_LANG_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 312: break;
            case BLOCK_STRING_BODY_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 313: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ID;
            }
          // fall through
          case 41: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 42: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 43: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 44: break;
          case 5:
            { return DOT;
            }
          // fall through
          case 45: break;
          case 6:
            { yybegin(LABEL_STATE); return COLON;
            }
          // fall through
          case 46: break;
          case 7:
            { return SEMICOLON;
            }
          // fall through
          case 47: break;
          case 8:
            { return PARENT_SHAPE_REF;
            }
          // fall through
          case 48: break;
          case 9:
            { return LBRACE;
            }
          // fall through
          case 49: break;
          case 10:
            { return RBRACE;
            }
          // fall through
          case 50: break;
          case 11:
            { return UNQUOTED_STRING;
            }
          // fall through
          case 51: break;
          case 12:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 52: break;
          case 13:
            { yybegin(YYINITIAL); return LBRACE;
            }
          // fall through
          case 53: break;
          case 14:
            { yybegin(BLOCK_STRING_LANG_STATE);
								blockStringToken = new StringBuilder(yytext()).reverse();
								return BLOCK_STRING_OPEN;
            }
          // fall through
          case 54: break;
          case 15:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 55: break;
          case 16:
            { yybegin(PROPERTY_VALUE_STATE); return COLON;
            }
          // fall through
          case 56: break;
          case 17:
            { return INT;
            }
          // fall through
          case 57: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 58: break;
          case 19:
            { yybegin(YYINITIAL); return SEMICOLON;
            }
          // fall through
          case 59: break;
          case 20:
            { yybegin(ARRAY_STATE); return LBRACKET;
            }
          // fall through
          case 60: break;
          case 21:
            { return RBRACKET;
            }
          // fall through
          case 61: break;
          case 22:
            { yybegin(BLOCK_STRING_BODY_STATE); return BLOCK_STRING_LANG;
            }
          // fall through
          case 62: break;
          case 23:
            { if (blockStringToken == null) {
				yybegin(YYINITIAL);
				blockStringToken = null;
				return BLOCK_STRING_CLOSE;
		}
		else if (StringUtilRt.endsWith(yytext(), blockStringToken)) {
				// push back to register on next step as a BLOCK_STRING_CLOSE token,
				// (we neeed it to easily implement embededed language, brace matcher and so on)
				yypushback(blockStringToken.length());
				blockStringToken = null;
				return BLOCK_STRING_BODY;
		}
            }
          // fall through
          case 63: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 64: break;
          case 25:
            { yybegin(YYINITIAL); return RBRACKET;
            }
          // fall through
          case 65: break;
          case 26:
            { return DOUBLE_HYPHEN_ARROW;
            }
          // fall through
          case 66: break;
          case 27:
            { return ARROW;
            }
          // fall through
          case 67: break;
          case 28:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return STYLE_KEYWORDS;
            }
          // fall through
          case 68: break;
          case 29:
            { return REVERSE_ARROW;
            }
          // fall through
          case 69: break;
          case 30:
            { return STRING;
            }
          // fall through
          case 70: break;
          case 31:
            { return DOUBLE_ARROW;
            }
          // fall through
          case 71: break;
          case 32:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return SIMPLE_RESERVED_KEYWORDS;
            }
          // fall through
          case 72: break;
          case 33:
            { return FLOAT;
            }
          // fall through
          case 73: break;
          case 34:
            { return COMPOSITE_RESERVED_KEYWORDS;
            }
          // fall through
          case 74: break;
          case 35:
            { return TRUE;
            }
          // fall through
          case 75: break;
          case 36:
            { return STYLE_KEYWORD;
            }
          // fall through
          case 76: break;
          case 37:
            { return FALSE;
            }
          // fall through
          case 77: break;
          case 38:
            { return COLOR;
            }
          // fall through
          case 78: break;
          case 39:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return CONTAINER_LESS_KEYWORDS;
            }
          // fall through
          case 79: break;
          case 40:
            { return RESERVED_KEYWORD_HOLDERS;
            }
          // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
