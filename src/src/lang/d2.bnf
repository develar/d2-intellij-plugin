{
		parserClass="org.jetbrains.plugins.d2.lang.D2Parser"

		elementTypeHolderClass="org.jetbrains.plugins.d2.lang.D2ElementTypes"
		elementTypeClass="org.jetbrains.plugins.d2.lang.D2ElementType"
		elementTypeFactory="org.jetbrains.plugins.d2.lang.D2ElementTypeFactory.element"

		generatePsi=false

		tokenTypeClass="com.intellij.psi.tree.IElementType"
		tokenTypeFactory="org.jetbrains.plugins.d2.lang.D2ElementTypeFactory.token"

		psiTreeUtilClass="org.jetbrains.plugins.d2.lang.D2PsiTreeUtil"

		psiClassPrefix="D2"
		psiImplClassSuffix="Impl"
		psiPackage="org.jetbrains.plugins.d2.lang.psi"
		psiImplPackage="org.jetbrains.plugins.d2.lang.psi.impl"
}

File ::= !<<eof>> ContainerContent*

private ContainerContent ::= ShapeIdWithProperty | ShapeConnection | ShapeDeclaration | IdPropertyMap | COMMENT | SEMICOLON | IMPLICIT_SEMICOLON

// same as for file level, but Property is allowed without ShapeIdChain
BlockDefinition ::= LBRACE ContainerContent* RBRACE {
		pin=1
}

private ShapeIdChain ::= ShapeId (DOT ShapeId)*
ParentShapeRefPsi ::= PARENT_SHAPE_REF
ShapeRef ::= (ParentShapeRefPsi DOT)? ShapeIdChain

ShapeDeclaration ::= ShapeIdChain (COLON (ShapeLabel | BlockString)?)? BlockDefinition?

ShapeConnection ::= ShapeRef (Connector ShapeRef)+ (COLON (ShapeLabel | BlockString)?)? BlockDefinition?
Connector ::= ARROW | REVERSE_ARROW | DOUBLE_ARROW | DOUBLE_HYPHEN_ARROW

// logs.style.strokes: "#f4a261"
private ShapeIdWithProperty ::= (ShapeRef DOT)? ShapeProperty

ShapeId ::= BlockString | ID | STRING

private ShapeLabel ::= UNQUOTED_STRING | STRING

BlockString ::= BLOCK_STRING_OPEN BLOCK_STRING_LANG? BLOCK_STRING_BODY BLOCK_STRING_CLOSE

UnquotedStringValue ::= UNQUOTED_STRING
StringValue ::= STRING
ColorValue ::= COLOR
OtherValue ::= STRING | ID | INT | FLOAT | TRUE | FALSE | DOT | COLOR | BlockString

ShapeProperty ::= ShapePropertyKey COLON ShapePropertyValue
// STYLE_KEYWORDS are not allowed, but we parse it (report error as inspection - it is allowed if our parent is "style")
// todo: handle RESERVED_KEYWORD_HOLDERS in the same way as style (do not allow arbitrary ID)
private PropertyKey ::= SIMPLE_RESERVED_KEYWORDS | (RESERVED_KEYWORD_HOLDERS DOT ID) | (STYLE_KEYWORD DOT STYLE_KEYWORDS) | CONTAINER_LESS_KEYWORDS | STYLE_KEYWORDS
ShapePropertyKey ::= PropertyKey
private ShapePropertyValue ::= UnquotedStringValue | StringValue | ColorValue | OtherValue | Array

IdPropertyMap ::= (COMPOSITE_RESERVED_KEYWORDS | STYLE_KEYWORD) COLON LBRACE PropertyMapContent* RBRACE
private PropertyMapContent ::= SubIdPropertyMap | IdProperty | COMMENT | SEMICOLON | IMPLICIT_SEMICOLON

SubIdPropertyMap ::= IdPropertyKey COLON LBRACE PropertyMapContent* RBRACE

IdProperty ::= IdPropertyKey COLON IdPropertyValue
IdPropertyKey ::= PropertyKey | ID | STRING
private IdPropertyValue ::= SubIdPropertyMap | UnquotedStringValue | StringValue | ColorValue | OtherValue | Array

Array ::= LBRACKET (ShapePropertyValue SEMICOLON?)* RBRACKET