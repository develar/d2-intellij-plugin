// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/org/jetbrains/plugins/d2/lang/_D2Lexer.flex

package org.jetbrains.plugins.d2.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.d2.lang.D2ElementTypes.*;


public class _D2Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LABEL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\3\0\1\7\2\0\1\10\2\0\1\11"+
    "\1\12\1\0\12\13\1\14\1\15\1\16\1\0\1\17"+
    "\2\0\32\10\1\0\1\20\2\0\1\10\1\0\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\10\1\32\1\33\1\34\1\35\1\36\1\37\1\10"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\10\1\46"+
    "\1\47\1\50\1\0\1\51\7\0\1\52\u01a2\0\2\52"+
    "\326\0\u0100\52";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\1\14\4\1\11\1\12"+
    "\1\13\1\2\1\14\2\13\1\6\2\13\1\15\1\16"+
    "\1\0\1\17\4\0\1\20\1\21\1\0\1\22\26\4"+
    "\2\0\1\17\1\13\1\0\4\13\1\17\1\23\1\24"+
    "\22\4\1\25\4\4\2\13\1\17\1\13\1\17\2\13"+
    "\1\23\2\13\15\4\1\26\2\4\1\17\1\13\1\26"+
    "\1\25\2\4\1\27\1\0\2\4\1\30\3\4\1\27"+
    "\15\4\1\0\7\4\1\0\7\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\126\0\u0183\0\126\0\126\0\u01ae\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\126\0\126\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\126\0\126\0\254\0\126"+
    "\0\u0535\0\u0102\0\u0560\0\u058b\0\u0158\0\126\0\u05b6\0\u05e1"+
    "\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u03dd\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\254"+
    "\0\u05b6\0\126\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u012d\0\u0e1c\0\u0e47\0\u0e72"+
    "\0\u0e9d\0\u09be\0\u09e9\0\u09be\0\u0ec8\0\u045e\0\u0a3f\0\u0ef3"+
    "\0\u0a95\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020"+
    "\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178"+
    "\0\u012d\0\u11a3\0\u11ce\0\u09e9\0\u11f9\0\u03dd\0\u1224\0\u124f"+
    "\0\u127a\0\u012d\0\u12a5\0\u12d0\0\u12fb\0\u012d\0\u1326\0\u1351"+
    "\0\u137c\0\u03dd\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
    "\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e"+
    "\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\2\3\2\10\1\17\1\20"+
    "\1\10\1\21\1\22\1\23\1\24\1\10\1\25\1\10"+
    "\1\26\3\10\1\27\1\30\1\10\1\31\1\32\2\10"+
    "\1\33\1\34\1\3\1\35\1\36\1\37\1\35\1\36"+
    "\1\40\1\35\1\41\3\35\1\42\12\35\1\43\13\35"+
    "\1\44\5\35\1\45\1\46\1\35\54\0\4\4\46\0"+
    "\5\47\1\50\12\47\1\51\32\47\2\6\2\0\46\6"+
    "\1\0\7\52\1\50\10\52\1\53\32\52\10\0\1\10"+
    "\1\54\1\0\1\10\5\0\27\10\14\0\1\55\5\0"+
    "\1\56\43\0\1\10\1\54\1\57\1\13\5\0\27\10"+
    "\14\0\1\60\51\0\1\10\1\54\1\0\1\10\5\0"+
    "\12\10\1\61\2\10\1\62\11\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\4\10\1\63\3\10\1\64\16\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\1\65\26\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\17\10\1\66"+
    "\7\10\13\0\1\10\1\54\1\0\1\10\5\0\4\10"+
    "\1\67\10\10\1\70\11\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\2\10\1\71\24\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\1\72\3\10\1\73\3\10\1\74"+
    "\16\10\13\0\1\10\1\54\1\0\1\10\5\0\4\10"+
    "\1\75\22\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\7\10\1\76\5\10\1\77\3\10\1\100\5\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\1\101\14\10\1\102"+
    "\1\10\1\103\7\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\1\104\3\10\1\105\22\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\10\10\1\106\16\10\3\0\1\35"+
    "\1\107\1\0\1\35\1\107\43\35\2\0\1\35\1\0"+
    "\1\36\2\0\1\36\50\0\1\37\50\0\1\40\1\110"+
    "\1\47\1\40\1\110\1\111\12\40\1\112\27\40\2\47"+
    "\1\40\1\41\1\113\1\52\1\41\1\113\2\41\1\111"+
    "\10\41\1\114\27\41\2\52\1\41\1\35\1\107\1\0"+
    "\1\35\1\107\5\35\1\115\1\42\34\35\2\0\2\35"+
    "\1\107\1\0\1\35\1\107\14\35\1\116\26\35\2\0"+
    "\2\35\1\107\1\0\1\35\1\107\33\35\1\117\7\35"+
    "\2\0\1\35\5\47\1\120\12\47\1\51\32\47\2\52"+
    "\2\0\46\52\11\0\1\10\2\0\1\10\5\0\27\10"+
    "\16\0\1\121\50\0\1\60\5\0\1\122\43\0\1\10"+
    "\1\54\1\0\1\10\5\0\1\123\26\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\14\10\1\124\12\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\20\10\1\125\6\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\17\10\1\126"+
    "\7\10\13\0\1\10\1\54\1\0\1\10\5\0\12\10"+
    "\1\127\14\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\10\10\1\130\16\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\10\10\1\131\16\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\17\10\1\132\7\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\15\10\1\133\11\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\1\10\1\134\25\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\5\10\1\135\21\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\14\10\1\136"+
    "\12\10\13\0\1\10\1\54\1\0\1\10\5\0\1\137"+
    "\26\10\13\0\1\10\1\54\1\0\1\10\5\0\1\140"+
    "\26\10\13\0\1\10\1\54\1\0\1\10\5\0\22\10"+
    "\1\141\4\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\25\10\1\142\1\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\17\10\1\143\7\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\15\10\1\144\1\145\10\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\22\10\1\146\4\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\17\10\1\147\7\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\17\10\1\150"+
    "\7\10\13\0\1\10\1\54\1\0\1\10\5\0\3\10"+
    "\1\151\23\10\3\0\2\152\1\0\1\152\1\107\43\152"+
    "\2\0\1\152\2\153\1\47\1\153\1\110\1\154\12\153"+
    "\1\155\27\153\2\47\1\153\1\40\1\110\1\47\1\40"+
    "\1\110\1\156\12\40\1\112\27\40\2\47\1\40\2\157"+
    "\1\52\1\157\1\113\2\157\1\154\10\157\1\160\27\157"+
    "\2\52\1\157\1\41\1\113\1\0\1\35\1\113\43\41"+
    "\2\52\2\35\1\107\1\0\1\35\1\107\6\35\1\161"+
    "\34\35\2\0\2\35\1\107\1\0\1\35\1\107\26\35"+
    "\1\162\14\35\2\0\2\35\1\107\1\0\1\35\1\107"+
    "\36\35\1\163\4\35\2\0\1\35\10\0\1\10\1\54"+
    "\1\0\1\10\5\0\20\10\1\164\6\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\20\10\1\165\6\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\2\10\1\145\24\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\4\10\1\166"+
    "\22\10\13\0\1\10\1\54\1\0\1\10\5\0\20\10"+
    "\1\167\6\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\3\10\1\170\23\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\6\10\1\171\20\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\10\10\1\172\16\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\14\10\1\145\12\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\4\10\1\173\22\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\21\10\1\145\5\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\11\10\1\145"+
    "\15\10\13\0\1\10\1\54\1\0\1\10\5\0\17\10"+
    "\1\145\7\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\16\10\1\174\10\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\17\10\1\175\7\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\12\10\1\176\14\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\6\10\1\177\20\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\12\10\1\200\14\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\4\10\1\201\22\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\20\10\1\145"+
    "\6\10\13\0\1\10\1\54\1\0\1\10\5\0\21\10"+
    "\1\202\5\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\21\10\1\203\5\10\3\0\2\153\1\47\1\153\1\110"+
    "\1\204\12\153\1\155\27\153\2\47\1\153\2\157\1\0"+
    "\1\152\1\113\43\157\2\52\1\152\1\35\1\107\1\0"+
    "\1\35\1\107\34\35\1\205\6\35\2\0\2\35\1\107"+
    "\1\0\1\35\1\107\20\35\1\206\22\35\2\0\1\35"+
    "\10\0\1\10\1\54\1\0\1\10\5\0\20\10\1\207"+
    "\6\10\13\0\1\10\1\54\1\0\1\10\5\0\21\10"+
    "\1\210\5\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\2\10\1\211\24\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\4\10\1\212\22\10\13\0\1\10\1\213\1\0"+
    "\1\10\5\0\27\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\7\10\1\135\17\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\26\10\1\214\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\12\10\1\145\14\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\4\10\1\145\22\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\2\10\1\215\24\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\4\10\1\216\22\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\4\10\1\217"+
    "\22\10\13\0\1\10\1\54\1\0\1\10\5\0\21\10"+
    "\1\220\5\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\10\10\1\221\16\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\7\10\1\145\17\10\3\0\1\35\1\107\1\0"+
    "\1\35\1\107\20\35\1\222\22\35\2\0\1\35\10\0"+
    "\1\10\1\54\1\0\1\10\5\0\4\10\1\147\22\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\17\10\1\223"+
    "\7\10\13\0\1\10\1\54\1\0\1\10\5\0\21\10"+
    "\1\224\5\10\13\0\1\10\2\0\1\10\5\0\2\10"+
    "\1\225\3\10\1\226\10\10\1\227\7\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\15\10\1\230\11\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\4\10\1\231\22\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\21\10\1\231"+
    "\5\10\13\0\1\10\1\54\1\0\1\10\5\0\10\10"+
    "\1\232\16\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\2\10\1\233\24\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\1\234\26\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\10\10\1\71\16\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\15\10\1\235\11\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\1\232\26\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\15\10\1\236\11\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\14\10\1\237\12\10\13\0"+
    "\1\10\1\240\1\0\1\10\5\0\27\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\16\10\1\145\10\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\1\241\26\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\10\10\1\242\16\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\12\10\1\243"+
    "\14\10\13\0\1\10\1\54\1\0\1\10\5\0\24\10"+
    "\1\147\2\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\21\10\1\233\5\10\13\0\1\10\2\0\1\10\5\0"+
    "\1\244\26\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\12\10\1\245\14\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\14\10\1\135\12\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\22\10\1\246\4\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\17\10\1\247\7\10\13\0\1\10"+
    "\1\250\1\0\1\10\5\0\27\10\13\0\1\10\1\54"+
    "\1\0\1\10\5\0\13\10\1\251\13\10\13\0\1\10"+
    "\1\54\1\0\1\10\5\0\17\10\1\252\7\10\13\0"+
    "\1\10\2\0\1\10\5\0\6\10\1\226\20\10\13\0"+
    "\1\10\1\54\1\0\1\10\5\0\14\10\1\147\12\10"+
    "\13\0\1\10\1\54\1\0\1\10\5\0\15\10\1\253"+
    "\11\10\13\0\1\10\1\54\1\0\1\10\5\0\24\10"+
    "\1\254\2\10\13\0\1\10\1\54\1\0\1\10\5\0"+
    "\7\10\1\255\17\10\13\0\1\10\1\54\1\0\1\10"+
    "\5\0\4\10\1\256\22\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\1\257\26\10\13\0\1\10\1\54\1\0"+
    "\1\10\5\0\3\10\1\216\23\10\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6278];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\1\1\2\11\15\1\2\11"+
    "\10\1\2\11\1\0\1\11\4\0\1\1\1\11\1\0"+
    "\27\1\2\0\2\1\1\0\6\1\1\11\70\1\1\0"+
    "\24\1\1\0\7\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _D2Lexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _D2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 25: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 26: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 27: break;
          case 4:
            { return ID;
            }
          // fall through
          case 28: break;
          case 5:
            { return DOT;
            }
          // fall through
          case 29: break;
          case 6:
            { return INT;
            }
          // fall through
          case 30: break;
          case 7:
            { yybegin(LABEL); return COLON;
            }
          // fall through
          case 31: break;
          case 8:
            { return SEMICOLON;
            }
          // fall through
          case 32: break;
          case 9:
            { return LBRACE;
            }
          // fall through
          case 33: break;
          case 10:
            { return RBRACE;
            }
          // fall through
          case 34: break;
          case 11:
            { return UNQUOTED_STRING;
            }
          // fall through
          case 35: break;
          case 12:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 13:
            { yybegin(YYINITIAL); return LBRACE;
            }
          // fall through
          case 37: break;
          case 14:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 38: break;
          case 15:
            { return STRING;
            }
          // fall through
          case 39: break;
          case 16:
            { return DOUBLE_HYPHEN_ARROW;
            }
          // fall through
          case 40: break;
          case 17:
            { return ARROW;
            }
          // fall through
          case 41: break;
          case 18:
            { return REVERSE_ARROW;
            }
          // fall through
          case 42: break;
          case 19:
            { return FLOAT;
            }
          // fall through
          case 43: break;
          case 20:
            { return DOUBLE_ARROW;
            }
          // fall through
          case 44: break;
          case 21:
            { return SIMPLE_RESERVED_KEYWORDS;
            }
          // fall through
          case 45: break;
          case 22:
            { return TRUE;
            }
          // fall through
          case 46: break;
          case 23:
            { return FALSE;
            }
          // fall through
          case 47: break;
          case 24:
            { return RESERVED_KEYWORD_HOLDERS;
            }
          // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
