// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: D2Lexer.flex

package org.jetbrains.plugins.d2.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtilRt;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.jetbrains.plugins.d2.lang.D2ElementTypes.*;


public class D2FlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LABEL_STATE = 2;
  public static final int PROPERTY_VALUE_BEGIN_STATE = 4;
  public static final int PROPERTY_VALUE_STATE = 6;
  public static final int BLOCK_STRING_LANG_STATE = 8;
  public static final int BLOCK_STRING_BODY_STATE = 10;
  public static final int ARRAY_STATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\5\0\1\7\1\10\1\0"+
    "\3\11\1\12\6\11\1\13\1\14\1\15\1\0\1\16"+
    "\2\0\6\17\24\20\1\21\1\22\1\23\1\0\1\20"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\20\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\20\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\7\0\1\3"+
    "\32\0\1\57\u01df\0\1\57\177\0\13\57\35\0\2\3"+
    "\5\0\1\57\57\0\1\57\240\0\1\57\377\0\u0100\60";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\2\4\21\1\1\10\1\11\1\12"+
    "\1\2\1\13\2\12\1\14\1\15\1\16\1\17\1\12"+
    "\1\20\1\21\1\22\1\23\1\24\2\12\1\25\1\4"+
    "\1\26\1\27\1\30\3\0\1\1\1\3\2\0\1\1"+
    "\1\31\1\32\1\33\1\34\36\1\2\0\1\35\1\12"+
    "\1\0\1\12\1\15\4\12\1\0\1\35\2\0\1\36"+
    "\33\1\1\37\4\1\1\35\1\12\1\40\2\12\1\35"+
    "\6\1\2\33\20\1\1\41\2\1\2\12\1\42\2\1"+
    "\1\37\3\1\3\0\7\1\1\43\1\1\1\0\3\1"+
    "\1\12\1\44\17\1\1\33\4\1\1\45\1\12\1\0"+
    "\2\1\1\0\7\1\2\0\3\1\1\12\15\1\1\12"+
    "\1\1\1\46\10\1\1\0\24\1\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u027d"+
    "\0\u027d\0\u02df\0\u027d\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u027d\0\u027d\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u027d\0\u0746\0\u027d\0\u027d\0\u0777"+
    "\0\u07a8\0\u0651\0\u027d\0\u0651\0\u0651\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u0651\0\u0651\0\u0157\0\u01b9\0\u08ce\0\u08ff"+
    "\0\u0930\0\u021b\0\u0961\0\u0992\0\u024c\0\u027d\0\u0157\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0651\0\u06e4"+
    "\0\u0651\0\u0fb2\0\u0715\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u086c\0\u027d\0\u1109\0\u113a\0\u027d\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u0157\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u06e4\0\u175a"+
    "\0\u1076\0\u178b\0\u17bc\0\u08ce\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u0157\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u0651\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u0157\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u0651\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc"+
    "\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u0651\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u0157\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda"+
    "\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\1\14\1\15\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\23\5\10\1\24\1\25"+
    "\1\26\1\27\1\10\1\30\1\31\1\32\1\33\1\10"+
    "\1\34\1\35\1\36\1\37\2\10\1\40\1\41\1\42"+
    "\1\43\1\44\3\10\1\45\1\23\1\46\1\11\1\10"+
    "\1\47\1\50\1\51\1\23\1\52\1\47\1\53\5\47"+
    "\1\23\37\47\1\54\1\55\1\56\1\23\1\47\1\23"+
    "\3\11\7\23\1\57\43\23\1\11\1\23\1\47\1\50"+
    "\1\51\1\23\1\60\1\47\1\53\2\47\2\61\1\62"+
    "\1\63\4\47\1\64\1\47\1\65\5\47\1\66\13\47"+
    "\1\67\6\47\2\23\1\56\1\23\1\47\1\70\3\11"+
    "\51\70\1\23\1\70\1\11\1\70\55\71\1\72\3\71"+
    "\1\47\3\11\10\47\1\21\4\47\1\73\1\47\1\74"+
    "\30\47\3\23\1\11\1\47\1\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\35\10\4\0\1\10\1\0"+
    "\3\11\53\0\1\11\1\0\1\12\1\76\2\77\1\10"+
    "\2\12\1\76\1\77\2\12\4\77\3\12\1\100\31\12"+
    "\4\77\1\12\2\13\2\0\4\13\1\101\2\13\4\101"+
    "\35\13\4\101\1\10\1\14\1\102\2\103\2\14\1\10"+
    "\1\102\1\103\2\14\4\103\3\14\1\104\31\14\4\103"+
    "\1\14\7\0\1\105\6\0\1\106\123\0\1\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\10\10\1\107"+
    "\24\10\4\0\1\10\7\0\1\110\51\0\1\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\21\10\1\111"+
    "\13\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\22\10\1\112\12\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\17\10\1\113"+
    "\2\10\1\114\12\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\11\10\1\115\3\10\1\116"+
    "\4\10\1\117\12\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\15\10\1\120\4\10\1\121"+
    "\12\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\24\10\1\122\10\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\11\10\1\123"+
    "\10\10\1\124\12\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\7\10\1\125\16\10\1\126"+
    "\6\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\5\10\1\127\3\10\1\130\3\10\1\131"+
    "\17\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\27\10\1\132\5\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\11\10\1\133"+
    "\23\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\23\10\1\134\11\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\14\10\1\135"+
    "\5\10\1\136\3\10\1\137\6\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\5\10\1\140"+
    "\3\10\1\141\10\10\1\142\12\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\21\10\1\143"+
    "\13\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\5\10\1\144\3\10\1\145\23\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\15\10\1\146\17\10\4\0\1\10\1\47\1\147\2\0"+
    "\10\47\1\0\37\47\4\0\1\47\1\0\1\50\61\0"+
    "\1\51\56\0\1\52\1\150\2\77\1\151\7\52\1\77"+
    "\5\52\1\152\31\52\4\77\1\52\1\53\1\153\2\103"+
    "\2\53\1\151\5\53\1\103\5\53\1\154\31\53\4\103"+
    "\1\53\1\155\3\0\5\155\2\0\4\155\2\0\3\155"+
    "\30\0\1\155\1\55\1\155\1\0\1\155\1\52\1\150"+
    "\2\77\1\151\1\156\6\52\1\77\5\52\1\152\31\52"+
    "\4\77\1\52\1\47\1\147\2\0\4\47\1\157\2\61"+
    "\1\47\1\0\37\47\4\0\2\47\1\147\2\0\10\47"+
    "\1\0\7\47\1\160\27\47\4\0\2\47\1\147\2\0"+
    "\10\47\1\0\26\47\1\161\10\47\4\0\1\47\1\70"+
    "\3\0\51\70\1\0\1\70\1\0\1\70\55\162\1\72"+
    "\3\162\55\0\1\72\3\0\4\77\1\163\15\77\1\164"+
    "\36\77\1\12\1\76\2\77\3\12\1\76\1\77\2\12"+
    "\4\77\3\12\1\100\31\12\4\77\1\12\2\101\2\0"+
    "\54\101\1\0\6\103\1\163\13\103\1\165\36\103\1\14"+
    "\1\102\2\0\3\14\1\102\1\103\2\14\4\103\35\14"+
    "\4\103\1\10\7\0\1\110\6\0\1\166\42\0\1\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\15\10"+
    "\1\167\17\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\17\10\1\17\4\10\1\170\10\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\5\10\1\171\27\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\21\10\1\172\13\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\25\10\1\173\7\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\24\10\1\174\10\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\27\10\1\175\5\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\17\10\1\176\15\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\21\10\1\177\13\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\15\10\1\200\17\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\15\10\1\201\17\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\24\10\1\202\10\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\22\10\1\203\12\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\5\10\1\204\27\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\6\10\1\205\26\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\12\10\1\206\22\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\21\10\1\207\13\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\17\10\1\210\15\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\5\10\1\211\27\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\5\10\1\212\27\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\5\10\1\213\27\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\27\10\1\214\5\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\24\10\1\215\6\10\1\216\1\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\24\10"+
    "\1\217\10\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\32\10\1\220\2\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\22\10"+
    "\1\221\1\222\11\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\10\10\1\223\24\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\24\10\1\224\10\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\24\10\1\225\10\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\10\10\1\226\24\10\4\0\1\10\1\52\1\150\2\77"+
    "\1\227\7\52\1\77\5\52\1\152\31\52\4\77\1\52"+
    "\1\53\1\153\2\0\10\53\1\103\37\53\4\103\1\47"+
    "\1\155\3\0\5\155\2\0\4\155\2\0\3\155\30\0"+
    "\1\155\1\0\1\155\1\0\1\155\1\52\1\150\2\77"+
    "\1\151\4\52\2\230\1\52\1\77\2\52\1\230\2\52"+
    "\1\152\1\52\6\230\22\52\4\77\1\52\1\47\1\147"+
    "\2\0\5\47\2\231\1\47\1\0\37\47\4\0\2\47"+
    "\1\147\2\0\10\47\1\0\21\47\1\232\15\47\4\0"+
    "\2\47\1\147\2\0\10\47\1\0\31\47\1\233\5\47"+
    "\4\0\1\47\4\77\1\234\15\77\1\164\36\77\2\103"+
    "\2\0\54\103\1\0\1\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\20\10\1\235\14\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\10\10"+
    "\1\236\24\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\25\10\1\237\7\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\25\10"+
    "\1\240\7\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\7\10\1\222\25\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\11\10"+
    "\1\241\23\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\6\10\1\242\26\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\17\10"+
    "\1\243\15\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\26\10\1\244\6\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\10\10"+
    "\1\245\24\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\13\10\1\246\21\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\15\10"+
    "\1\247\17\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\21\10\1\222\13\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\17\10"+
    "\1\250\15\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\11\10\1\251\23\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\26\10"+
    "\1\222\6\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\16\10\1\222\16\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\26\10"+
    "\1\252\6\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\24\10\1\222\10\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\7\10"+
    "\1\253\25\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\10\10\1\254\12\10\1\255\11\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\24\10\1\256\10\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\22\10\1\257\12\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\17\10\1\260\15\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\13\10\1\261\21\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\26\10\1\262\6\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\17\10\1\263\15\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\11\10\1\264\23\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\25\10\1\265\7\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\26\10\1\266\6\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\26\10\1\267\6\10"+
    "\4\0\1\10\1\52\1\150\2\77\1\151\4\52\2\270"+
    "\1\52\1\77\2\52\1\270\2\52\1\152\1\52\6\270"+
    "\22\52\4\77\1\52\1\47\1\147\2\0\10\47\1\0"+
    "\27\47\1\271\7\47\4\0\2\47\1\147\2\0\10\47"+
    "\1\0\13\47\1\272\23\47\4\0\1\47\1\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\5\10\1\273"+
    "\27\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\11\10\1\274\23\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\25\10\1\275"+
    "\7\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\26\10\1\276\6\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\7\10\1\277"+
    "\25\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\17\10\1\300\15\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\301\1\0\2\10\4\0\11\10\1\17"+
    "\23\10\4\0\2\10\1\75\2\0\3\10\1\302\1\0"+
    "\2\10\4\0\35\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\303\1\0\2\10\4\0\35\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\14\10\1\206"+
    "\20\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\34\10\1\304\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\15\10\1\305\17\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\17\10\1\222\15\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\15\10\1\306\17\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\15\10\1\307\17\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\22\10\1\310\12\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\11\10\1\222\23\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\7\10\1\311\25\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\16\10\1\312\16\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\11\10\1\313\23\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\11\10\1\314\23\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\315\1\0\2\10\4\0\35\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\26\10"+
    "\1\316\6\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\24\10\1\317\10\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\15\10"+
    "\1\320\17\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\14\10\1\222\20\10\4\0\1\10"+
    "\1\52\1\150\2\77\1\151\4\52\2\321\1\52\1\77"+
    "\2\52\1\321\2\52\1\152\1\52\6\321\22\52\4\77"+
    "\1\52\1\47\1\147\2\0\10\47\1\0\13\47\1\322"+
    "\23\47\4\0\1\47\1\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\26\10\1\323\6\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\24\10"+
    "\1\324\10\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\11\10\1\224\23\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\24\10"+
    "\1\325\10\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\26\10\1\326\6\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\11\10"+
    "\1\327\23\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\23\10\1\330\11\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\7\10"+
    "\1\331\15\10\1\332\7\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\7\10\1\333\3\10"+
    "\1\334\10\10\1\335\10\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\22\10\1\336\12\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\7\10\1\107\25\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\23\10\1\337\11\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\26\10\1\340\6\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\31\10\1\107\3\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\11\10\1\341\23\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\11\10\1\342\23\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\26\10\1\341\6\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\26\10\1\343\6\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\15\10\1\344\17\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\17\10\1\345\15\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\7\10\1\346\25\10\4\0\1\10\1\52\1\150"+
    "\2\77\1\347\4\52\2\350\1\52\1\77\2\52\1\350"+
    "\2\52\1\152\1\52\6\350\22\52\4\77\1\52\1\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\11\10"+
    "\1\17\23\10\4\0\2\10\1\75\2\0\3\10\1\351"+
    "\1\0\2\10\4\0\35\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\5\10\1\352\27\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\15\10\1\353\17\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\354\1\0\2\10\4\0\35\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\5\10"+
    "\1\355\27\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\22\10\1\356\12\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\15\10"+
    "\1\357\17\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\22\10\1\360\12\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\5\10"+
    "\1\344\27\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\22\10\1\361\12\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\21\10"+
    "\1\362\13\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\17\10\1\363\15\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\33\10"+
    "\1\107\1\10\4\0\2\10\1\75\2\0\3\10\1\364"+
    "\1\0\2\10\4\0\35\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\365\1\0\2\10\4\0\35\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\24\10"+
    "\1\366\10\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\23\10\1\222\11\10\4\0\2\10"+
    "\1\75\2\0\3\10\1\75\1\0\2\10\4\0\15\10"+
    "\1\367\17\10\4\0\2\10\1\75\2\0\3\10\1\75"+
    "\1\0\2\10\4\0\5\10\1\370\27\10\4\0\1\10"+
    "\1\52\1\150\2\77\1\151\4\52\2\371\1\52\1\77"+
    "\2\52\1\371\2\52\1\152\1\52\6\371\22\52\4\77"+
    "\1\52\1\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\24\10\1\372\10\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\15\10\1\373\17\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\22\10\1\374\12\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\6\10\1\375\26\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\26\10\1\376\6\10\4\0\2\10\1\75\2\0"+
    "\3\10\1\75\1\0\2\10\4\0\17\10\1\377\15\10"+
    "\4\0\2\10\1\75\2\0\3\10\1\75\1\0\2\10"+
    "\4\0\34\10\1\363\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\17\10\1\u0100\15\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\31\10\1\u0101\3\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\26\10\1\346\6\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\11\10\1\107\23\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\5\10\1\u0102\27\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\10\10\1\u0103\20\10\1\u0104\3\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\5\10\1\u0105"+
    "\27\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\21\10\1\363\13\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\17\10\1\u0106"+
    "\15\10\4\0\1\10\1\52\1\150\2\77\1\151\4\52"+
    "\2\u0107\1\52\1\77\2\52\1\u0107\2\52\1\152\1\52"+
    "\6\u0107\22\52\4\77\1\52\1\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\5\10\1\u0108\27\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\21\10\1\206\13\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\21\10\1\u0109\13\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\22\10\1\u010a\12\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\26\10\1\u010b\6\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\22\10\1\u010c\12\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\27\10\1\u010d\5\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\25\10\1\222\7\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\24\10\1\u010e\10\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\5\10\1\u010f\27\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\75\1\0\2\10\4\0\15\10\1\u0110\17\10\4\0"+
    "\2\10\1\75\2\0\3\10\1\75\1\0\2\10\4\0"+
    "\21\10\1\u0111\13\10\4\0\2\10\1\75\2\0\3\10"+
    "\1\u0112\1\0\2\10\4\0\35\10\4\0\1\10\1\52"+
    "\1\150\2\77\1\347\7\52\1\77\5\52\1\152\31\52"+
    "\4\77\1\52\1\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\10\10\1\u0113\24\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\24\10\1\u0114"+
    "\10\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\11\10\1\u0115\23\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\24\10\1\107"+
    "\10\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\20\10\1\u0116\14\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\24\10\1\u0117"+
    "\10\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\25\10\1\u0118\7\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\10\10\1\u0119"+
    "\24\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\25\10\1\u011a\7\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\13\10\1\334"+
    "\21\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\15\10\1\u011b\17\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\10\10\1\u011c"+
    "\24\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\24\10\1\u011d\10\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\21\10\1\u0101"+
    "\13\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\22\10\1\u011e\12\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\14\10\1\107"+
    "\20\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\26\10\1\u0118\6\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\12\10\1\u011f"+
    "\22\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\27\10\1\u0120\5\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\11\10\1\u010c"+
    "\23\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\21\10\1\107\13\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\31\10\1\u0121"+
    "\3\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\22\10\1\u0122\12\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\25\10\1\107"+
    "\7\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\14\10\1\u0123\20\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\24\10\1\u0124"+
    "\10\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\11\10\1\u0125\23\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\20\10\1\107"+
    "\14\10\4\0\2\10\1\75\2\0\3\10\1\75\1\0"+
    "\2\10\4\0\5\10\1\u0126\27\10\4\0\2\10\1\75"+
    "\2\0\3\10\1\75\1\0\2\10\4\0\10\10\1\u0127"+
    "\24\10\4\0\1\10";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12593];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\6\1\1\11\1\1\2\11\1\1\1\11\21\1"+
    "\2\11\5\1\1\11\1\1\2\11\3\1\1\11\11\1"+
    "\3\0\2\1\2\0\2\1\1\11\40\1\2\0\2\1"+
    "\1\0\6\1\1\0\1\11\2\0\1\11\112\1\3\0"+
    "\11\1\1\0\33\1\1\0\2\1\1\0\7\1\2\0"+
    "\34\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public D2FlexLexer() {
    this((java.io.Reader)null);
  }

  private StringBuilder blockStringToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public D2FlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_STRING_LANG_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 296: break;
            case BLOCK_STRING_BODY_STATE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 297: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ID;
            }
          // fall through
          case 40: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 41: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 42: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 43: break;
          case 5:
            { return DOT;
            }
          // fall through
          case 44: break;
          case 6:
            { yybegin(LABEL_STATE); return COLON;
            }
          // fall through
          case 45: break;
          case 7:
            { return SEMICOLON;
            }
          // fall through
          case 46: break;
          case 8:
            { return LBRACE;
            }
          // fall through
          case 47: break;
          case 9:
            { return RBRACE;
            }
          // fall through
          case 48: break;
          case 10:
            { return UNQUOTED_STRING;
            }
          // fall through
          case 49: break;
          case 11:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 50: break;
          case 12:
            { yybegin(YYINITIAL); return LBRACE;
            }
          // fall through
          case 51: break;
          case 13:
            { yybegin(BLOCK_STRING_LANG_STATE);
								blockStringToken = new StringBuilder(yytext()).reverse();
								return BLOCK_STRING_OPEN;
            }
          // fall through
          case 52: break;
          case 14:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 53: break;
          case 15:
            { yybegin(PROPERTY_VALUE_STATE); return COLON;
            }
          // fall through
          case 54: break;
          case 16:
            { return INT;
            }
          // fall through
          case 55: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 56: break;
          case 18:
            { yybegin(YYINITIAL); return SEMICOLON;
            }
          // fall through
          case 57: break;
          case 19:
            { yybegin(ARRAY_STATE); return LBRACKET;
            }
          // fall through
          case 58: break;
          case 20:
            { return RBRACKET;
            }
          // fall through
          case 59: break;
          case 21:
            { yybegin(BLOCK_STRING_BODY_STATE); return BLOCK_STRING_LANG;
            }
          // fall through
          case 60: break;
          case 22:
            { if (blockStringToken == null) {
				yybegin(YYINITIAL);
				blockStringToken = null;
				return BLOCK_STRING_CLOSE;
		}
		else if (StringUtilRt.endsWith(yytext(), blockStringToken)) {
				// push back to register on next step as a BLOCK_STRING_CLOSE token,
				// (we neeed it to easily implement embededed language, brace matcher and so on)
				yypushback(blockStringToken.length());
				blockStringToken = null;
				return BLOCK_STRING_BODY;
		}
            }
          // fall through
          case 61: break;
          case 23:
            { return LBRACKET;
            }
          // fall through
          case 62: break;
          case 24:
            { yybegin(YYINITIAL); return RBRACKET;
            }
          // fall through
          case 63: break;
          case 25:
            { return DOUBLE_HYPHEN_ARROW;
            }
          // fall through
          case 64: break;
          case 26:
            { return ARROW;
            }
          // fall through
          case 65: break;
          case 27:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return STYLE_KEYWORDS;
            }
          // fall through
          case 66: break;
          case 28:
            { return REVERSE_ARROW;
            }
          // fall through
          case 67: break;
          case 29:
            { return STRING;
            }
          // fall through
          case 68: break;
          case 30:
            { return DOUBLE_ARROW;
            }
          // fall through
          case 69: break;
          case 31:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return SIMPLE_RESERVED_KEYWORDS;
            }
          // fall through
          case 70: break;
          case 32:
            { return FLOAT;
            }
          // fall through
          case 71: break;
          case 33:
            { return COMPOSITE_RESERVED_KEYWORDS;
            }
          // fall through
          case 72: break;
          case 34:
            { return TRUE;
            }
          // fall through
          case 73: break;
          case 35:
            { return STYLE_KEYWORD;
            }
          // fall through
          case 74: break;
          case 36:
            { return FALSE;
            }
          // fall through
          case 75: break;
          case 37:
            { return COLOR;
            }
          // fall through
          case 76: break;
          case 38:
            { yybegin(PROPERTY_VALUE_BEGIN_STATE); return CONTAINER_LESS_KEYWORDS;
            }
          // fall through
          case 77: break;
          case 39:
            { return RESERVED_KEYWORD_HOLDERS;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
